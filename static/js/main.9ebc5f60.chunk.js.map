{"version":3,"sources":["components/Fields.tsx","components/Calculation.tsx","utils/getEquation.ts","App.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","dot","height","width","borderRadius","display","backgroundColor","palette","action","disabled","margin","spacing","left","icon","Fields","distribution","color","showQuestionMark","classes","Grid","container","style","map","value","row","item","xs","Paper","className","Array","from","length","_","n","a","primary","main","b","secondary","button","Calculation","add","waitingTime","aDistribution","bDistribution","showB","onResult","useState","Date","now","startTime","React","progress","setProgress","shortCut","setShortCut","retried","setRetried","useEffect","timer","setTimeout","clearInterval","justifyContent","LinearProgress","variant","Button","onClick","time","ok","setValue","getDistribution","difficulty","row1","row2","Math","min","round","i","random","idCount","getEquation","op","id","result","padding","fontSize","textAlign","resultText","right","wrong","error","contrastText","difficultyLabels","App","setDifficulty","operation","setOperation","equation","setEquation","setResult","sumTime","count","shortCutCount","statistic","setStatistic","Container","Typography","Slider","onChange","event","newValue","valueLabelDisplay","step","marks","max","IconButton","prevState","key","res","r","root","e","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ebc5f60.chunk.js","sourcesContent":["import React, {FC, Fragment} from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {makeStyles} from \"@material-ui/core\";\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\n\nconst useStyles = makeStyles((theme) => ({\n    dot: {\n        height: 24,\n        width: 24,\n        borderRadius: \"50%\",\n        display: \"inline-block\",\n        backgroundColor: theme.palette.action.disabled,\n        margin: theme.spacing(0.5),\n    },\n    left: {\n        backgroundColor: '#eee',\n    },\n    icon: {\n        margin: theme.spacing(0.5),\n    }\n}));\n\ntype Props = {\n    distribution: number[]\n    color: string,\n    showQuestionMark: boolean\n}\nconst Fields: FC<Props> = ({distribution, color, showQuestionMark}) => {\n    const classes = useStyles();\n    return (\n        <Grid container spacing={1} style={{width: 336}}>\n            {distribution.map((value, row) => {\n                return (\n                    <Fragment key={row}>\n                        <Grid item xs={6}>\n                            <Paper className={classes.left}>\n                                {Array.from({length: 5}, (_, n) => {\n                                    if (showQuestionMark && n >= value) {\n                                        return <HelpOutlineIcon color={\"action\"} className={classes.icon} />\n                                    }\n                                    return (<div\n                                        key={n}\n                                        className={classes.dot + ' ' + (n < value ? color : '')} />);\n                                })}\n                            </Paper>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Paper>\n                                {Array.from({length: 5}, (_, n) => {\n                                    if (showQuestionMark && n + 5 >= value) {\n                                        return <HelpOutlineIcon color={\"action\"} className={classes.icon} />\n                                    }\n                                    return (<div\n                                        key={n}\n                                        className={classes.dot + ' ' + (n + 5 < value ? color : '')} />);\n                                })}\n                            </Paper>\n                        </Grid>\n                    </Fragment>\n                );\n            })}\n        </Grid>\n    );\n};\nexport default Fields;\n","import React, {FC, useEffect, useState} from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Fields from \"./Fields\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Button from \"@material-ui/core/Button\";\nimport {makeStyles} from \"@material-ui/core\";\nimport {Equation} from \"../types/types\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    a: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    b: {\n        backgroundColor: theme.palette.secondary.main,\n    },\n    button: {\n        margin: theme.spacing(1)\n    }\n}));\n\nexport type Result = {\n    ok: boolean,\n    time: number,\n    shortCut: boolean\n}\n\ntype Props = Equation & {\n    showB: boolean;\n    showQuestionMark: boolean;\n    onResult: (result: Result) => void\n}\n\nconst Calculation: FC<Props> = ({\n                                    a,\n                                    b,\n                                    add,\n                                    waitingTime,\n                                    aDistribution,\n                                    bDistribution,\n                                    showB,\n                                    showQuestionMark,\n                                    onResult\n                                }) => {\n    const classes = useStyles();\n    const [startTime] = useState<number>(Date.now())\n    const [progress, setProgress] = React.useState(100);\n    const [shortCut, setShortCut] = React.useState(false);\n    const [retried, setRetried] = React.useState(false);\n    const setValue = (n: number) => {\n        const time = Date.now() - startTime;\n        const ok = add ? (a + b) === n : (a - b) === n;\n        onResult({ok, time, shortCut: !retried && shortCut})\n    };\n\n\n    useEffect(() => {\n        const x = 100\n        let timer: NodeJS.Timeout\n        if (progress > 0) {\n            timer = setTimeout(() => {\n                setProgress(progress - (100 / (waitingTime / x)));\n            }, x);\n        }\n        return () => {\n            timer !== null && clearInterval(timer)\n        };\n    }, [progress, setProgress, waitingTime]);\n\n    const retry = () => {\n        setRetried(true)\n        setProgress(100)\n        setShortCut(false)\n    }\n    return <>\n\n        {progress > 0 && <>\n            <Grid item xs={12}>\n                <Grid container justifyContent=\"center\">\n                    <Paper>\n                        <Fields distribution={aDistribution} color={classes.a} showQuestionMark={showQuestionMark} />\n                    </Paper>\n                </Grid>\n            </Grid>\n            {showB && <Grid container justifyContent=\"center\">\n                {add ?\n                    <AddIcon color={\"primary\"} /> : <RemoveIcon color={\"secondary\"} />}\n            </Grid>}\n            {showB && <Grid item xs={12}>\n                <Grid container justifyContent=\"center\">\n                    <Paper>\n                        <Fields distribution={bDistribution} color={classes.b} showQuestionMark={showQuestionMark} />\n                    </Paper>\n                </Grid>\n            </Grid>}\n            <Grid item xs={12}>\n                <LinearProgress variant=\"determinate\" value={progress} />\n            </Grid>\n            <Grid container justifyContent=\"center\">\n                <Button onClick={() => {\n                    setShortCut(true)\n                    setProgress(0)\n                }} variant={\"contained\"}>Abkürzen</Button>\n            </Grid></>\n        }\n\n        {progress <= 0 && <>\n            <Grid item xs={12}>\n                <Grid container justifyContent=\"center\">\n                    {Array.from({length: 21}, (_, n) => (\n                        <Button key={n} className={classes.button} variant=\"outlined\"\n                                onClick={() => setValue(n)}>{n}</Button>))}\n                </Grid>\n            </Grid>\n            <Grid item xs={12}>\n                <Grid container justifyContent={\"center\"}>\n                    <Button onClick={retry} color={\"primary\"} variant={\"outlined\"}>Nochmal anzeigen</Button>\n                </Grid>\n            </Grid>\n        </>}\n\n    </>;\n};\n\nexport default Calculation\n","import {Equation, Operation} from \"../types/types\";\n\nconst getDistribution = (difficulty: number, value: number) => {\n    let row1 = 0;\n    let row2 = 0;\n    if (difficulty <= 4) {\n        row1 = Math.min(10, value)\n        row2 = value - row1\n    } else if (difficulty === 5) {\n        row1 = Math.round(value / 2)\n        row2 = value - row1\n    } else {\n        for (let i = 0; i < value; i++) {\n            if (row1 === 10) {\n                row2++\n            } else if (row2 === 10) {\n                row1++\n            } else if (Math.random() <= 0.3) {\n                row1++\n            } else {\n                row2++\n            }\n        }\n    }\n    if (difficulty === 1) return [row1]\n    return [row1, row2];\n};\n\nlet idCount = 0\n\nconst getEquation = (difficulty: number, op: Operation): Equation => {\n    let add;\n    switch (op) {\n        case \"PLUS\":\n            add = true\n            break;\n        case \"MINUS\":\n            add = false\n            break;\n        case \"BOTH\":\n            add = Math.random() > 0.5\n            break;\n\n    }\n    const showB = difficulty >= 3\n    if (difficulty < 3) {\n        add = true\n    }\n    let a, b = 0;\n    if (add) {\n        a = Math.round(Math.random() * 18 + 1)\n        switch (difficulty) {\n            case 0:\n                a = Math.round(Math.random() * 20)\n                break;\n            case 1: // auf 10 auffüllen\n                a = Math.round(Math.random() * 10)\n                b = 10 - 2 * a\n                break;\n            case 2:\n                a = Math.round(Math.random() * 20)\n                b = 20 - 2 * a\n                break;\n            case 3:\n                b = 5 - a % 5\n                if (b === 0) {\n                    a--\n                    b++\n                }\n                break;\n            default:\n                b = Math.round(Math.random() * (19 - a) + 1)\n                break;\n        }\n    } else {\n        a = Math.round(Math.random() * 19 + 1)\n        if (difficulty === 3) {\n            b = a % 5\n        } else {\n            b = Math.round(Math.random() * a)\n        }\n    }\n    return {\n        a,\n        b,\n        add,\n        showB,\n        waitingTime: difficulty < 3 ? 1000 : difficulty === 3 ? 2000 : 5000,\n        aDistribution: getDistribution(difficulty, a),\n        bDistribution: getDistribution(difficulty, b),\n        id: idCount++\n    };\n}\n\nexport default getEquation;\n","import React, {useEffect, useState} from 'react';\nimport {IconButton, makeStyles} from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport ExposureIcon from '@material-ui/icons/Exposure';\nimport IndeterminateCheckBoxIcon from '@material-ui/icons/IndeterminateCheckBox';\nimport Calculation, {Result} from \"./components/Calculation\";\nimport {Equation, Operation} from \"./types/types\";\nimport getEquation from \"./utils/getEquation\";\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n    result: {\n        padding: theme.spacing(3),\n        fontSize: \"24px\",\n        textAlign: \"center\"\n    },\n    resultText: {\n        fontSize: \"48px\",\n    },\n    right: {\n        backgroundColor: '#2E8826',\n        color: '#fff'\n    },\n    wrong: {\n        backgroundColor: theme.palette.error.main,\n        color: theme.palette.error.contrastText\n    }\n}));\n\n\ntype Statistic = {\n    right: number\n    wrong: number\n    sumTime: number\n    count: number\n    shortCutCount: number\n}\n\nconst difficultyLabels = {\n    0: \"Zahlen zuordnen\",\n    1: \"Zahlen auffüllen 10\",\n    2: \"Zahlen auffüllen 20\",\n    3: \"Berechnung 5er Blöcke\",\n    4: \"Berechnung normal\",\n    5: \"Berechnung gleich verteilt\",\n    6: \"Berechnung zufällige Zuordnung\",\n}\n\nfunction App() {\n    const classes = useStyles();\n\n    const [difficulty, setDifficulty] = useState<0 | 1 | 2 | 3 | 4 | 5 | 6>(0);\n    const [operation, setOperation] = useState<Operation>(\"PLUS\");\n    const [equation, setEquation] = useState<Equation>(() => getEquation(difficulty, operation));\n    const [result, setResult] = useState<Result | null>(null);\n    const [statistic, setStatistic] = useState<Statistic>({right: 0, wrong: 0, sumTime: 0, count: 0, shortCutCount: 0});\n\n    const next = () => {\n        if (result?.ok) {\n            setEquation(getEquation(difficulty, operation))\n        } else {\n            setEquation((e) => ({...e, waitingTime: e.waitingTime + 1000}))\n        }\n        setResult(null);\n    }\n\n    const handleDifficulty = (event: React.ChangeEvent<{}>, newValue: number | number[]) => {\n        if (typeof newValue !== 'number') {\n            return;\n        }\n        if (difficulty === newValue) {\n            return\n        }\n        if (newValue < 4 && operation !== \"PLUS\") {\n            setOperation(\"PLUS\")\n        }\n        setResult(null);\n        // @ts-ignore\n        setDifficulty(newValue)\n    };\n\n    const changeOperation = () => {\n        setOperation(prevState => {\n            switch (prevState) {\n                case \"PLUS\":\n                    return \"MINUS\";\n                case \"MINUS\":\n                    return \"BOTH\";\n                case \"BOTH\":\n                    return \"PLUS\";\n            }\n        })\n    };\n\n    useEffect(() => {\n        setEquation(getEquation(difficulty, operation))\n    }, [difficulty, operation]);\n\n    let onResult: (result: Result) => void = res => {\n        setStatistic(prevState => {\n            const r = {...prevState}\n            if (res.ok) {\n                r.right++\n            } else {\n                r.wrong++\n            }\n            if (res.shortCut) {\n                r.shortCutCount++\n            }\n            r.sumTime = r.sumTime + res.time\n            r.count++\n            return r;\n        })\n        setResult(res)\n    };\n    return (<Container>\n        <Grid container spacing={2}>\n            <Grid item xs={10}>\n                <Grid container justifyContent={\"center\"}>\n\n                    <Typography>{difficultyLabels[difficulty]}</Typography>\n                    <Slider\n                        value={difficulty}\n                        onChange={handleDifficulty}\n                        valueLabelDisplay=\"off\"\n                        step={1}\n                        marks\n                        min={0}\n                        max={6}\n                    />\n                </Grid>\n            </Grid>\n            <Grid item xs={2}>\n                <IconButton onClick={changeOperation} disabled={difficulty < 3}>\n                    {operation === \"PLUS\" && <AddBoxIcon />}\n                    {operation === \"MINUS\" && <IndeterminateCheckBoxIcon />}\n                    {operation === \"BOTH\" && <ExposureIcon />}\n                </IconButton>\n            </Grid>\n\n            {result === null &&\n            <Calculation {...equation} showQuestionMark={difficulty === 1 || difficulty === 2} key={equation.id}\n                         onResult={onResult} />}\n            {result !== null &&\n            <>\n                <Grid item xs={12}>\n                    <Paper classes={{root: classes.result + ' ' + (result.ok ? classes.right : classes.wrong)}}>\n                        Zeit: {result.time / 1000} Sekunden\n                        <div className={classes.resultText}>\n                            {result.ok ? 'Richtig' : 'Falsch'}\n                        </div>\n                    </Paper>\n                </Grid>\n                <Grid item xs={8}>Richtig:</Grid><Grid item xs={4}>{statistic.right}</Grid>\n                <Grid item xs={8}>Falsch:</Grid><Grid item xs={4}>{statistic.wrong}</Grid>\n                <Grid item xs={8}>Abgekürzt:</Grid><Grid item xs={4}>{statistic.shortCutCount}</Grid>\n                <Grid item xs={8}>Durchschnittliche Zeit:</Grid><Grid item\n                                                                      xs={4}>{Math.round(statistic.sumTime / statistic.count) / 1000} s</Grid>\n                <Grid item xs={12}>\n                    <Grid container justifyContent={\"center\"}>\n                        <Button onClick={next} color={\"primary\"} variant={\"outlined\"}>\n                            {result.ok ? \"Nächste Aufgabe\" : \"Nochmal\"}\n                        </Button>\n                    </Grid>\n                </Grid>\n\n            </>}\n        </Grid>\n    </Container>);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}