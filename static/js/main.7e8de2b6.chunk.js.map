{"version":3,"sources":["components/Fields.tsx","components/Calculation.tsx","utils/getEquation.ts","App.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","dot","height","width","borderRadius","display","backgroundColor","palette","action","disabled","margin","spacing","left","icon","Fields","distribution","color","showQuestionMark","classes","Grid","container","style","map","value","row","item","xs","Paper","className","Array","from","length","_","n","a","primary","main","b","secondary","button","Calculation","add","waitingTime","aDistribution","bDistribution","showB","onResult","useState","Date","now","startTime","React","progress","setProgress","shortCut","setShortCut","retried","setRetried","useEffect","timer","setTimeout","clearInterval","justifyContent","LinearProgress","variant","Button","onClick","sm","md","time","ok","setValue","getDistribution","difficulty","row1","row2","Math","min","round","i","random","idCount","getEquation","plus","minus","id","result","padding","fontSize","textAlign","resultText","right","wrong","error","contrastText","menuButton","marginRight","title","flexGrow","content","marginTop","difficultyLabels","App","setDifficulty","setPlus","setMinus","equation","setEquation","setResult","sumTime","count","shortCutCount","statistic","setStatistic","anchorEl","setAnchorEl","next","e","handleClose","Container","AppBar","position","Toolbar","IconButton","edge","event","currentTarget","Typography","keepMounted","open","Boolean","onClose","Object","entries","key","text","MenuItem","newValue","parseInt","divider","ListItemIcon","Switch","checked","onChange","root","res","prevState","r","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e8de2b6.chunk.js","sourcesContent":["import React, {FC, Fragment} from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {makeStyles} from \"@material-ui/core\";\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\n\nconst useStyles = makeStyles((theme) => ({\n    dot: {\n        height: 24,\n        width: 24,\n        borderRadius: \"50%\",\n        display: \"inline-block\",\n        backgroundColor: theme.palette.action.disabled,\n        margin: theme.spacing(0.5),\n    },\n    left: {\n        backgroundColor: '#eee',\n    },\n    icon: {\n        margin: theme.spacing(0.5),\n    }\n}));\n\ntype Props = {\n    distribution: number[]\n    color: string,\n    showQuestionMark: boolean\n}\nconst Fields: FC<Props> = ({distribution, color, showQuestionMark}) => {\n    const classes = useStyles();\n    return (\n        <Grid container spacing={1} style={{width: 336}}>\n            {distribution.map((value, row) => {\n                return (\n                    <Fragment key={row}>\n                        <Grid item xs={6}>\n                            <Paper className={classes.left}>\n                                {Array.from({length: 5}, (_, n) => {\n                                    if (showQuestionMark && n >= value) {\n                                        return <HelpOutlineIcon color={\"action\"} className={classes.icon} />\n                                    }\n                                    return (<div\n                                        key={n}\n                                        className={classes.dot + ' ' + (n < value ? color : '')} />);\n                                })}\n                            </Paper>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Paper>\n                                {Array.from({length: 5}, (_, n) => {\n                                    if (showQuestionMark && n + 5 >= value) {\n                                        return <HelpOutlineIcon color={\"action\"} className={classes.icon} />\n                                    }\n                                    return (<div\n                                        key={n}\n                                        className={classes.dot + ' ' + (n + 5 < value ? color : '')} />);\n                                })}\n                            </Paper>\n                        </Grid>\n                    </Fragment>\n                );\n            })}\n        </Grid>\n    );\n};\nexport default Fields;\n","import React, {FC, useEffect, useState} from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Fields from \"./Fields\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Button from \"@material-ui/core/Button\";\nimport {makeStyles} from \"@material-ui/core\";\nimport {Equation} from \"../types/types\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    a: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    b: {\n        backgroundColor: theme.palette.secondary.main,\n    },\n    button: {\n        // margin: theme.spacing(1)\n    }\n}));\n\nexport type Result = {\n    ok: boolean,\n    time: number,\n    shortCut: boolean\n}\n\ntype Props = Equation & {\n    showB: boolean;\n    showQuestionMark: boolean;\n    onResult: (result: Result) => void\n}\n\nconst Calculation: FC<Props> = ({\n                                    a,\n                                    b,\n                                    add,\n                                    waitingTime,\n                                    aDistribution,\n                                    bDistribution,\n                                    showB,\n                                    showQuestionMark,\n                                    onResult\n                                }) => {\n    const classes = useStyles();\n    const [startTime] = useState<number>(Date.now())\n    const [progress, setProgress] = React.useState(100);\n    const [shortCut, setShortCut] = React.useState(false);\n    const [retried, setRetried] = React.useState(false);\n    const setValue = (n: number) => {\n        const time = Date.now() - startTime;\n        const ok = add ? (a + b) === n : (a - b) === n;\n        onResult({ok, time, shortCut: !retried && shortCut})\n    };\n\n\n    useEffect(() => {\n        const x = 100\n        let timer: NodeJS.Timeout\n        if (progress > 0) {\n            timer = setTimeout(() => {\n                setProgress(progress - (100 / (waitingTime / x)));\n            }, x);\n        }\n        return () => {\n            timer !== null && clearInterval(timer)\n        };\n    }, [progress, setProgress, waitingTime]);\n\n    const retry = () => {\n        setRetried(true)\n        setProgress(100)\n        setShortCut(false)\n    }\n    return <>\n\n        {progress > 0 && <>\n            <Grid item xs={12}>\n                <Grid container justifyContent=\"center\">\n                    <Paper>\n                        <Fields distribution={aDistribution} color={classes.a} showQuestionMark={showQuestionMark} />\n                    </Paper>\n                </Grid>\n            </Grid>\n            {showB && <Grid container justifyContent=\"center\">\n                {add ?\n                    <AddIcon color={\"primary\"} /> : <RemoveIcon color={\"secondary\"} />}\n            </Grid>}\n            {showB && <Grid item xs={12}>\n                <Grid container justifyContent=\"center\">\n                    <Paper>\n                        <Fields distribution={bDistribution} color={classes.b} showQuestionMark={showQuestionMark} />\n                    </Paper>\n                </Grid>\n            </Grid>}\n            <Grid item xs={12}>\n                <LinearProgress variant=\"determinate\" value={progress} />\n            </Grid>\n            <Grid container justifyContent=\"center\">\n                <Button onClick={() => {\n                    setShortCut(true)\n                    setProgress(0)\n                }} variant={\"contained\"}>Abkürzen</Button>\n            </Grid></>\n        }\n\n        {progress <= 0 && <>\n            <Grid item xs={12}>\n                <Grid container spacing={3}>\n                    {Array.from({length: 21}, (_, n) => (\n                        <Grid item xs={3} sm={2} md={1}>\n                            <Button key={n} variant=\"outlined\"\n                                    onClick={() => setValue(n)}>{n}</Button>\n                        </Grid>))}\n                </Grid>\n            </Grid>\n            <Grid item xs={12}>\n                <Grid container justifyContent={\"center\"}>\n                    <Button onClick={retry} color={\"primary\"} variant={\"outlined\"}>Nochmal anzeigen</Button>\n                </Grid>\n            </Grid>\n        </>}\n\n    </>;\n};\n\nexport default Calculation\n","import {Equation} from \"../types/types\";\n\nconst getDistribution = (difficulty: number, value: number) => {\n    let row1 = 0;\n    let row2 = 0;\n    if (difficulty <= 4) {\n        row1 = Math.min(10, value)\n        row2 = value - row1\n    } else if (difficulty === 5) {\n        row1 = Math.round(value / 2)\n        row2 = value - row1\n    } else {\n        for (let i = 0; i < value; i++) {\n            if (row1 === 10) {\n                row2++\n            } else if (row2 === 10) {\n                row1++\n            } else if (Math.random() <= 0.3) {\n                row1++\n            } else {\n                row2++\n            }\n        }\n    }\n    if (difficulty === 1) return [row1]\n    return [row1, row2];\n};\n\nlet idCount = 0\n\nconst getEquation = (difficulty: number, plus: boolean, minus: boolean): Equation => {\n    let add;\n    if (plus && minus) {\n        add = Math.random() > 0.5\n    } else {\n        add = !minus;\n    }\n    const showB = difficulty >= 3\n    if (difficulty < 3) {\n        add = true\n    }\n    let a, b = 0;\n    if (add) {\n        a = Math.round(Math.random() * 18 + 1)\n        switch (difficulty) {\n            case 0:\n                a = Math.round(Math.random() * 20)\n                break;\n            case 1: // auf 10 auffüllen\n                a = Math.round(Math.random() * 10)\n                b = 10 - 2 * a\n                break;\n            case 2:\n                a = Math.round(Math.random() * 20)\n                b = 20 - 2 * a\n                break;\n            case 3:\n                b = 5 - a % 5\n                if (b === 0) {\n                    a--\n                    b++\n                }\n                while (Math.random() > 0.5 && b + a < 20) {\n                    b = b + 5\n                }\n                break;\n            default:\n                b = Math.round(Math.random() * (19 - a) + 1)\n                break;\n        }\n    } else {\n        a = Math.round(Math.random() * 19 + 1)\n        if (difficulty === 3) {\n            b = a % 5\n            while (Math.random() > 0.5 && b < a) {\n                b = b + 5\n            }\n        } else {\n            b = Math.round(Math.random() * a)\n        }\n    }\n    return {\n        a,\n        b,\n        add,\n        showB,\n        waitingTime: difficulty < 3 ? 1000 : difficulty === 3 ? 2000 : 5000,\n        aDistribution: getDistribution(difficulty, a),\n        bDistribution: getDistribution(difficulty, b),\n        id: idCount++\n    };\n}\n\nexport default getEquation;\n","import React, {useState} from 'react';\nimport {ListItemIcon, makeStyles, Switch} from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport Calculation, {Result} from \"./components/Calculation\";\nimport {Equation} from \"./types/types\";\nimport getEquation from \"./utils/getEquation\";\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst useStyles = makeStyles((theme) => ({\n    result: {\n        padding: theme.spacing(3),\n        fontSize: \"24px\",\n        textAlign: \"center\"\n    },\n    resultText: {\n        fontSize: \"48px\",\n    },\n    right: {\n        backgroundColor: '#2E8826',\n        color: '#fff'\n    },\n    wrong: {\n        backgroundColor: theme.palette.error.main,\n        color: theme.palette.error.contrastText\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n    content: {\n        marginTop: theme.spacing(1)\n    }\n}));\n\n\ntype Statistic = {\n    right: number\n    wrong: number\n    sumTime: number\n    count: number\n    shortCutCount: number\n}\n\nconst difficultyLabels = {\n    0: \"Zahlen zuordnen\",\n    1: \"Zahlen auffüllen 10\",\n    2: \"Zahlen auffüllen 20\",\n    3: \"Berechnung 5er Blöcke\",\n    4: \"Berechnung normal\",\n    5: \"Berechnung gleich verteilt\",\n    6: \"Berechnung zufällige Zuordnung\",\n}\n\nfunction App() {\n    const classes = useStyles();\n\n    const [difficulty, setDifficulty] = useState<0 | 1 | 2 | 3 | 4 | 5 | 6>(0);\n    const [plus, setPlus] = useState(true);\n    const [minus, setMinus] = useState(false);\n    const [equation, setEquation] = useState<Equation | null>(null);\n    const [result, setResult] = useState<Result | null>(null);\n    const [statistic, setStatistic] = useState<Statistic>({right: 0, wrong: 0, sumTime: 0, count: 0, shortCutCount: 0});\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n    const next = () => {\n        setEquation((e) => {\n            if (e === null || result?.ok) {\n                return getEquation(difficulty, plus, minus)\n            }\n            return ({...e, waitingTime: e.waitingTime + 1000});\n        })\n        setResult(null);\n    }\n\n    const handleDifficulty = (newValue: number) => {\n        if (difficulty === newValue) {\n            return\n        }\n        setResult(null);\n        setEquation(null)\n        setStatistic({right: 0, wrong: 0, sumTime: 0, count: 0, shortCutCount: 0})\n        // @ts-ignore\n        setDifficulty(newValue)\n    };\n\n    let onResult: (result: Result) => void = res => {\n        setStatistic(prevState => {\n            const r = {...prevState}\n            if (res.ok) {\n                r.right++\n            } else {\n                r.wrong++\n            }\n            if (res.shortCut) {\n                r.shortCutCount++\n            }\n            r.sumTime = r.sumTime + res.time\n            r.count++\n            return r;\n        })\n        setResult(res)\n    };\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    return (<Container>\n        <AppBar position=\"static\">\n            <Toolbar>\n                <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" onClick={handleClick}>\n                    <MenuIcon />\n                </IconButton>\n                <Typography variant=\"h6\" className={classes.title}>\n                    {difficultyLabels[difficulty]}\n                </Typography>\n            </Toolbar>\n        </AppBar>\n        <Menu\n            id=\"simple-menu\"\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={handleClose}\n        >\n            {Object.entries(difficultyLabels).map(([key, text]) => (<MenuItem key={key} onClick={() => {\n                handleDifficulty(parseInt(key))\n                handleClose()\n            }} divider={key === '6'}>{text}</MenuItem>))}\n            <MenuItem>\n                <ListItemIcon>\n                    <Switch checked={plus} onChange={(event, checked) => {\n                        if (!minus && !checked) {\n                            setMinus(true)\n                        }\n                        setPlus(checked)\n                    }} />\n                </ListItemIcon>\n                <Typography variant=\"inherit\">Addition</Typography>\n            </MenuItem>\n            <MenuItem>\n                <ListItemIcon>\n                    <Switch checked={minus} onChange={(event, checked) => {\n                        if (!plus && !checked) {\n                            setPlus(true)\n                        }\n                        setMinus(checked)\n                    }} />\n                </ListItemIcon>\n                <Typography variant=\"inherit\">Subtraktion</Typography>\n            </MenuItem>\n        </Menu>\n        <Grid className={classes.content} container spacing={2}>\n            {equation == null && <Grid item xs={12}>\n                <Paper classes={{root: classes.result + ' ' + classes.right}} onClick={next}>\n                    {difficultyLabels[difficulty]}\n                    <div className={classes.resultText}>\n                        Start\n                    </div>\n                </Paper>\n            </Grid>}\n            {result === null && equation != null &&\n            <Calculation {...equation} showQuestionMark={difficulty === 1 || difficulty === 2} key={equation.id}\n                         onResult={onResult} />}\n            {result !== null &&\n            <>\n                <Grid item xs={12}>\n                    <Paper classes={{root: classes.result + ' ' + (result.ok ? classes.right : classes.wrong)}}\n                           onClick={next}>\n                        Zeit: {result.time / 1000} Sekunden\n                        <div className={classes.resultText}>\n                            {result.ok ? 'Richtig' : 'Falsch'}\n                        </div>\n                    </Paper>\n                </Grid>\n                <Grid item xs={8}>Richtig:</Grid><Grid item xs={4}>{statistic.right}</Grid>\n                <Grid item xs={8}>Falsch:</Grid><Grid item xs={4}>{statistic.wrong}</Grid>\n                <Grid item xs={8}>Abgekürzt:</Grid><Grid item xs={4}>{statistic.shortCutCount}</Grid>\n                <Grid item xs={8}>Durchschnittliche Zeit:</Grid><Grid item\n                                                                      xs={4}>{Math.round(statistic.sumTime / statistic.count) / 1000} s</Grid>\n                <Grid item xs={12}>\n                    <Grid container justifyContent={\"center\"}>\n                        <Button onClick={next} color={\"primary\"} variant={\"outlined\"}>\n                            {result.ok ? \"Nächste Aufgabe\" : \"Nochmal\"}\n                        </Button>\n                    </Grid>\n                </Grid>\n\n            </>}\n        </Grid>\n    </Container>)\n        ;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}