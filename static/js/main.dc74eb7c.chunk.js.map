{"version":3,"sources":["components/Fields.tsx","components/Calculation.tsx","utils/getEquation.ts","App.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","dot","height","width","borderRadius","display","backgroundColor","palette","action","disabled","margin","spacing","left","Fields","distribution","color","classes","Grid","container","style","map","value","row","item","xs","Paper","className","Array","from","length","_","n","a","primary","main","b","secondary","Calculation","add","waitingTime","aDistribution","bDistribution","onResult","useState","Date","now","startTime","React","progress","setProgress","shortCut","setShortCut","retried","setRetried","useEffect","timer","setTimeout","clearInterval","justifyContent","LinearProgress","variant","Button","onClick","time","ok","setValue","getDistribution","difficulty","row1","row2","Math","min","round","i","random","idCount","getEquation","op","id","result","padding","fontSize","textAlign","resultText","right","wrong","error","contrastText","App","setDifficulty","operation","setOperation","equation","setEquation","setResult","sumTime","count","shortCutCount","statistic","setStatistic","Container","Tabs","onChange","event","newValue","Tab","label","IconButton","prevState","key","res","r","root","e","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc74eb7c.chunk.js","sourcesContent":["import React, {FC, Fragment} from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {makeStyles} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n    dot: {\n        height: 24,\n        width: 24,\n        borderRadius: \"50%\",\n        display: \"inline-block\",\n        backgroundColor: theme.palette.action.disabled,\n        margin: theme.spacing(0.5)\n    },\n    left: {\n        backgroundColor: '#eee',\n    }\n}));\n\ntype Props = {\n    distribution: number[]\n    color: string,\n}\nconst Fields: FC<Props> = ({distribution, color}) => {\n    const classes = useStyles();\n    return (\n        <Grid container spacing={1} style={{width: 336}}>\n            {distribution.map((value, row) => {\n                return (\n                    <Fragment key={row}>\n                        <Grid item xs={6}>\n                            <Paper className={classes.left}>\n                                {Array.from({length: 5}, (_, n) => (<div\n                                    key={n}\n                                    className={classes.dot + ' ' + (n < value ? color : '')} />))}\n                            </Paper>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Paper>\n                                {Array.from({length: 5}, (_, n) => (<div\n                                    key={n}\n                                    className={classes.dot + ' ' + (n + 5 < value ? color : '')} />))}\n                            </Paper>\n                        </Grid>\n                    </Fragment>\n                );\n            })}\n        </Grid>\n    );\n};\nexport default Fields;\n","import React, {FC, useEffect, useState} from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Fields from \"./Fields\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Button from \"@material-ui/core/Button\";\nimport {makeStyles} from \"@material-ui/core\";\nimport {Equation} from \"../types/types\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    a: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    b: {\n        backgroundColor: theme.palette.secondary.main,\n    },\n}));\n\nexport type Result = {\n    ok: boolean,\n    time: number,\n    shortCut: boolean\n}\n\ntype Props = Equation & { onResult: (result: Result) => void }\n\nconst Calculation: FC<Props> = ({\n                                    a,\n                                    b,\n                                    add,\n                                    waitingTime,\n                                    aDistribution,\n                                    bDistribution,\n                                    onResult\n                                }) => {\n    const classes = useStyles();\n    const [startTime] = useState<number>(Date.now())\n    const [progress, setProgress] = React.useState(100);\n    const [shortCut, setShortCut] = React.useState(false);\n    const [retried, setRetried] = React.useState(false);\n    const setValue = (n: number) => {\n        const time = Date.now() - startTime;\n        const ok = add ? (a + b) === n : (a - b) === n;\n        onResult({ok, time, shortCut: !retried && shortCut})\n    };\n\n\n    useEffect(() => {\n        const x = 100\n        let timer: NodeJS.Timeout\n        if (progress > 0) {\n            timer = setTimeout(() => {\n                setProgress(progress - (100 / (waitingTime / x)));\n            }, x);\n        }\n        return () => {\n            timer !== null && clearInterval(timer)\n        };\n    }, [progress, setProgress, waitingTime]);\n\n    const retry = () => {\n        setRetried(true)\n        setProgress(100)\n        setShortCut(false)\n    }\n    return <>\n\n        {progress > 0 && <><Grid item xs={12}>\n            <Grid container justifyContent=\"center\">\n                <Paper>\n                    <Fields distribution={aDistribution} color={classes.a} />\n                </Paper>\n            </Grid>\n        </Grid>\n            <Grid container justifyContent=\"center\">\n                {add ?\n                    <AddIcon color={\"primary\"} /> : <RemoveIcon color={\"secondary\"} />}\n            </Grid>\n            <Grid item xs={12}>\n                <Grid container justifyContent=\"center\">\n                    <Paper>\n                        <Fields distribution={bDistribution} color={classes.b} />\n                    </Paper>\n                </Grid>\n            </Grid>\n            <Grid item xs={12}>\n                <LinearProgress variant=\"determinate\" value={progress} />\n            </Grid>\n            <Grid container justifyContent=\"center\">\n                <Button onClick={() => {\n                    setShortCut(true)\n                    setProgress(0)\n                }} variant={\"contained\"}>Abkürzen</Button>\n            </Grid></>\n        }\n\n        {progress <= 0 && <>\n            <Grid item xs={12}>\n                <Grid container justifyContent=\"center\">\n                    {Array.from({length: 21}, (_, n) => (\n                        <Button key={n} variant=\"outlined\" onClick={() => setValue(n)}>{n}</Button>))}\n                </Grid>\n            </Grid>\n            <Grid item xs={12}>\n                <Grid container justifyContent={\"center\"}>\n                    <Button onClick={retry} color={\"primary\"} variant={\"outlined\"}>Nochmal anzeigen</Button>\n                </Grid>\n            </Grid>\n        </>}\n\n    </>;\n};\n\nexport default Calculation\n","import {Difficulty, Equation, Operation} from \"../types/types\";\n\nconst getDistribution = (difficulty: Difficulty, value: number) => {\n    let row1 = 0;\n    let row2 = 0;\n    if (difficulty === \"FILL_FIRST\") {\n        row1 = Math.min(10, value)\n        row2 = value - row1\n    } else if (difficulty === \"FILL_EQUAL\") {\n        row1 = Math.round(value / 2)\n        row2 = value - row1\n    } else {\n        for (let i = 0; i < value; i++) {\n            if (row1 === 10) {\n                row2++\n            } else if (row2 === 10) {\n                row1++\n            } else if (Math.random() <= 0.3) {\n                row1++\n            } else {\n                row2++\n            }\n        }\n    }\n    return [row1, row2];\n};\n\nlet idCount = 0\n\nconst getEquation = (difficulty: Difficulty, op: Operation): Equation => {\n    let add;\n    switch (op) {\n        case \"PLUS\":\n            add = true\n            break;\n        case \"MINUS\":\n            add = false\n            break;\n        case \"BOTH\":\n            add = Math.random() > 0.5\n            break;\n\n    }\n    let a, b;\n    if (add) {\n        a = Math.round(Math.random() * 18 + 1)\n        b = Math.round(Math.random() * (19 - a) + 1)\n    } else {\n        a = Math.round(Math.random() * 19 + 1)\n        b = Math.round(Math.random() * a)\n    }\n    return {\n        a,\n        b,\n        add,\n        waitingTime: 5000,\n        aDistribution: getDistribution(difficulty, a),\n        bDistribution: getDistribution(difficulty, b),\n        id: idCount++\n    };\n}\n\nexport default getEquation;\n","import React, {useEffect, useState} from 'react';\nimport {IconButton, makeStyles} from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport ExposureIcon from '@material-ui/icons/Exposure';\nimport IndeterminateCheckBoxIcon from '@material-ui/icons/IndeterminateCheckBox';\nimport Calculation, {Result} from \"./components/Calculation\";\nimport {Difficulty, Equation, Operation} from \"./types/types\";\nimport getEquation from \"./utils/getEquation\";\n\nconst useStyles = makeStyles((theme) => ({\n    result: {\n        padding: theme.spacing(3),\n        fontSize: \"24px\",\n        textAlign: \"center\"\n    },\n    resultText: {\n        fontSize: \"48px\",\n    },\n    right: {\n        backgroundColor: '#2E8826',\n        color: '#fff'\n    },\n    wrong: {\n        backgroundColor: theme.palette.error.main,\n        color: theme.palette.error.contrastText\n    }\n}));\n\n\ntype Statistic = {\n    right: number\n    wrong: number\n    sumTime: number\n    count: number\n    shortCutCount: number\n}\n\nfunction App() {\n    const classes = useStyles();\n\n    const [difficulty, setDifficulty] = useState<Difficulty>(\"FILL_FIRST\");\n    const [operation, setOperation] = useState<Operation>(\"PLUS\");\n    const [equation, setEquation] = useState<Equation>(() => getEquation(difficulty, operation));\n    const [result, setResult] = useState<Result | null>(null);\n    const [statistic, setStatistic] = useState<Statistic>({right: 0, wrong: 0, sumTime: 0, count: 0, shortCutCount: 0});\n\n    const next = () => {\n        if (result?.ok) {\n            setEquation(getEquation(difficulty, operation))\n        } else {\n            setEquation((e) => ({...e, waitingTime: e.waitingTime + 1000}))\n        }\n        setResult(null);\n    }\n\n    const handleTabChange = (event: React.ChangeEvent<{}>, newValue: Difficulty) => {\n        if (difficulty === newValue) {\n            return\n        }\n        setResult(null);\n        setDifficulty(newValue);\n    };\n\n    const changeOperation = () => {\n        setOperation(prevState => {\n            switch (prevState) {\n                case \"PLUS\":\n                    return \"MINUS\";\n                case \"MINUS\":\n                    return \"BOTH\";\n                case \"BOTH\":\n                    return \"PLUS\";\n            }\n        })\n    };\n\n    useEffect(() => {\n        setEquation(getEquation(difficulty, operation))\n    }, [difficulty, operation]);\n\n    let onResult: (result: Result) => void = res => {\n        setStatistic(prevState => {\n            const r = {...prevState}\n            if (res.ok) {\n                r.right++\n            } else {\n                r.wrong++\n            }\n            if (res.shortCut) {\n                r.shortCutCount++\n            }\n            r.sumTime = r.sumTime + res.time\n            r.count++\n            return r;\n        })\n        setResult(res)\n    };\n    return (<Container>\n        <Grid container spacing={2}>\n            <Grid item xs={12}>\n                <Grid container justifyContent={\"center\"}>\n                    <Tabs value={difficulty} onChange={handleTabChange}>\n                        <Tab label=\"Leicht\" value={\"FILL_FIRST\"} />\n                        <Tab label=\"Mittel\" value={\"FILL_EQUAL\"} />\n                        <Tab label=\"Schwer\" value={\"FILL_RANDOM\"} />\n                        <IconButton onClick={changeOperation}>\n                            {operation === \"PLUS\" && <AddBoxIcon />}\n                            {operation === \"MINUS\" && <IndeterminateCheckBoxIcon />}\n                            {operation === \"BOTH\" && <ExposureIcon />}\n                        </IconButton>\n                    </Tabs>\n                </Grid>\n            </Grid>\n            {result === null && <Calculation {...equation} key={equation.id} onResult={onResult} />}\n            {result !== null &&\n            <>\n                <Grid item xs={12}>\n                    <Paper classes={{root: classes.result + ' ' + (result.ok ? classes.right : classes.wrong)}}>\n                        Zeit: {result.time / 1000} Sekunden\n                        <div className={classes.resultText}>\n                            {result.ok ? 'Richtig' : 'Falsch'}\n                        </div>\n                    </Paper>\n                </Grid>\n                <Grid item xs={8}>Richtig:</Grid><Grid item xs={4}>{statistic.right}</Grid>\n                <Grid item xs={8}>Falsch:</Grid><Grid item xs={4}>{statistic.wrong}</Grid>\n                <Grid item xs={8}>Abgekürzt:</Grid><Grid item xs={4}>{statistic.shortCutCount}</Grid>\n                <Grid item xs={8}>Durchschnittliche Zeit:</Grid><Grid item\n                                                                      xs={4}>{Math.round(statistic.sumTime / statistic.count) / 1000} s</Grid>\n                <Grid item xs={12}>\n                    <Grid container justifyContent={\"center\"}>\n                        <Button onClick={next} color={\"primary\"} variant={\"outlined\"}>\n                            {result.ok ? \"Nächste Aufgabe\" : \"Nochmal\"}\n                        </Button>\n                    </Grid>\n                </Grid>\n\n            </>}\n        </Grid>\n    </Container>);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}